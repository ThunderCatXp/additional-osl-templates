/*
 * MABCastIronCover.osl by Michel J. Anders (c)2013
 * from https://github.com/sambler/osl-shaders
 *
 * license: gplv3
 *
 * original script from -
 * Open Shading Language for Blender by Michel J. Anders
 *
 */


int incircle(float x, float y, float r, float cx, float cy){
    float rx = x - cx;
    float ry = y - cy;
    return rx*rx+ry*ry < r*r;
}

point rotate_90(point p){
    vector v = vector(0.5, 0.5, 0);
    point q = p - v;
    q=point(q[1],-q[0],0);
    return q+v;
}

point rotate_180(point p){
    return point(1-p[0],1-p[1],p[2]);
}

point mirror_h(point p){
    return point(1-p[0],p[1],p[2]);
}

point mirror_v(point p){
    return point(p[0],1-p[1],p[2]);
}

point mirror_xy(point p){
    return point(p[1],p[0],p[2]);
}

point mirror_line(
    point p,
    float a,
    float b )
{
    float Mx = abs(b) > 1e-7 ? (b * p[1] + p[0] - a * b) / (b * b + 1) : p[0];
    float My = a + b * Mx;
    return point(2 * Mx - p[0], 2 * My - p[1], 0);
}

void rosette(
    point Pos,
    output float Fac )
{
    Fac = 1;

    point p = Pos;
    if(p[0] > 0.5){
        p = mirror_h(p);
    }
    if(p[1] > 0.5){
        p = mirror_v(p);
    }
    if(p[1] > p[0] ){
        p = mirror_xy(p);
    }

    float a=0.3;
    float b=135;
    float w=0.12;

    if( p[1]>w && !incircle(p[0], p[1], 0.5-w/2, 0.5, 0.0) ){
        Fac = 0;
    } else if(incircle(p[0], p[1]*(1+0.5-p[0]), w/2, 0.5,0.5-1.2*w)){
        Fac = 0;
    } else {
        if( p[1]+0.5 > p[0]*2){
            p = mirror_line(p,-0.5,2);
        }
        float x = p[0]-0.5+w/2;
        if ((p[1]-2*w)*a < -x*x*x*b){
            Fac = 0;
        }
    }
}

void lily(
    point p,
    output float Fac )
{
    float x = p[0];
    float y = p[1];

    Fac = 0;

    float w = 0.12;

    if (y < w/2 ) { return; }

    y -= w/2;

    if ( x > 0.5 ) { x = 1 - x; }

    if ( y > 0.5 ) { return; }

    if ( y < x - 0.05 ) { return; }

    if ( incircle(x,y,0.1,0.15,0) ){
        return;
    }

    if(!incircle(x,y,0.15,0.15,0) ){
        if(y >0.05*cos(x*30)+0.2-x ){
            return;
        }
    }
    Fac = 1;
}

float dottedcircle(
    point p,
    float cx, float cy,
    float r, float w, int n )
{
    float Fac = 0;

    float e = w/4;
    float x = p[0], y = p[1];
    if( incircle(x,y,r ,cx,cy) && !incircle(x,y,r-w,cx,cy)){
        if(incircle(x,y,r-e,cx,cy) && !incircle(x,y,r-w+e,cx,cy)){
            Fac = 0.5;
            for(int i = 0; i < n; i++){
                float s,c;
                float angle = radians(i*360/n);
                float m = r - w/2;
                sincos(angle,s,c);
                if(incircle(x,y,e,cx+m*s,cy+m*c)){
                    Fac = 1;
                    break;
                }
            }
        }else{
            Fac = 1;
        }
    }
    return Fac;
}

void slant(
    float coord,
    float limit,
    output float Fac )
{
    if( Fac > 0 && coord < limit){
        Fac -= 0.2*(limit-coord)/limit;
    }
}

void dottedband(
    point q,
    output float Fac )
{
    Fac = 0;

    float rs = 0.15, rl = 0.43;
    float w = 0.08;

    if(q[1] > 0.5){ q = rotate_180(q); }
    if(q[0] > 0.5){ q = rotate_90(q); }

    // small up curl
    Fac = dottedcircle(q,0,0.5,rs,w,12);
    slant(q[0], rs-w, Fac);

    // main circle
    if( Fac == 0 ){
        Fac=dottedcircle(q, 0.5, 0.5, rl, w, 36);
        slant(q[0], rl-2*w, Fac);
    }

    // small down curl
    if( Fac == 0 ){
        Fac=dottedcircle(q, 0.5, 0.0, rs, w, 12);
        slant(q[1], rs-w, Fac);
    }
}


void dottededge(
    point p,
    output float Fac )
{
    Fac = 0;

    float Ndots = 15;
    if(p[1] < 0.08){
        if(p[1] < 0.015 || p[1] > 0.065){
            Fac = 1;
        }else{
            if(incircle(mod(p[0],1/Ndots),p[1],0.02,(1/Ndots)/2,0.04)){
                Fac = 1;
            }else{
                Fac = 0.5;
            }
        }
    }
}

shader MABCastIronCover(
    point Vector = P,
    float Scale = 1,

    output float Fac = 0 )
{
    point p = mod(Vector * Scale, 1.0);

    if(p[1] > 0.5){
        p = rotate_180(p);
    }

    p *= 2;

    if( p[1] < 1 ) {
        lily(mod(p, 1.0), Fac);
    }

    if( Fac == 0 ){
        rosette(mod(p, 1.0), Fac);
    }

    if( Fac == 0 ){
        dottedband(mod(p, 1.0), Fac);
    }

    if( Fac == 0){
        if(p[1] > 0.5){
            rosette(mod(p-0.5, 1.0), Fac);
        }
    }

    if( Fac == 0 ){
        dottededge(p, Fac);
    }
}
